{"version":3,"sources":["data/fetch/budget.fetch.js","data/fetch/common.fetch.js","data/fetch/index.js","utils/index.js","pages/Budget/components/BudgetTransactionList/BudgetTransactionList.css.js","pages/Budget/components/BudgetTransactionList/BudgetTransactionList.js","pages/Budget/components/BudgetTransactionList/index.js"],"names":["fetchBudget","a","id","fetch","process","REACT_APP_API_URL","response","json","data","fetchBudgetedCategories","addTransaction","budgetId","method","headers","body","JSON","stringify","fetchAllCategories","budget","common","formatCurrency","value","number","Number","Intl","NumberFormat","style","currency","format","formatDate","string","date","Date","DateTimeFormat","List","styled","ul","theme","spacing","xs","ListItem","li","colors","gray","dark","BudgetTransactionList","useQuery","API","allCategories","budgetedCategories","selectedParentCategoryId","useContext","BudgetContext","store","filteredTransactionsBySelectedParentCategory","useMemo","transactions","filter","transaction","some","budgetedCategory","categoryId","find","category","parentCategory","name","error","groupedTransactions","groupBy","getUTCDate","Object","entries","map","key","description","amount"],"mappings":"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","file":"static/js/5.0c762d99.chunk.js","sourcesContent":["export const fetchBudget = async ({ id }) => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${id}/?_embed=transactions`\r\n  );\r\n  const data = await response.json();\r\n\r\n  return data;\r\n};\r\n\r\nexport const fetchBudgetedCategories = async ({ id }) => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${id}/budgetCategories`\r\n  );\r\n  const data = await response.json();\r\n\r\n  return data;\r\n};\r\n\r\nexport const addTransaction = async ({ budgetId, data }) => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    }\r\n  );\r\n\r\n  return await response.json();\r\n};\r\n","export const fetchAllCategories = async () => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`\r\n  );\r\n  const data = await response.json();\r\n\r\n  return data;\r\n};\r\n","import * as budget from './budget.fetch';\r\nimport * as common from './common.fetch';\r\n\r\nexport default {\r\n  budget,\r\n  common,\r\n}","export const formatCurrency = (value) => {\r\n  const number = Number(value);\r\n\r\n  return new Intl.NumberFormat(\"pl\", {\r\n    style: \"currency\",\r\n    currency: \"PLN\",\r\n  }).format(number);\r\n};\r\n\r\nexport const formatDate = (string) => {\r\n  const date = new Date(string);\r\n\r\n  return new Intl.DateTimeFormat(\"pl\").format(date);\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  > li + li {\r\n    margin-top: ${({ theme }) => theme.spacing.xs}px;\r\n  }\r\n\r\n  li {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  border: 1px solid ${({ theme }) => theme.colors.gray.dark};\r\n  padding: ${({ theme }) => theme.spacing.xs}px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  > *:nth-child(1) {\r\n    flex: 4;\r\n  }\r\n  > *:nth-child(2) {\r\n    flex: 2;\r\n  }\r\n  > *:nth-child(3) {\r\n    flex: 3;\r\n  }\r\n  > *:nth-child(4) {\r\n    flex: 1;\r\n  }\r\n`;\r\n","import React, { useMemo, useContext } from \"react\";\r\nimport { groupBy } from \"lodash\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport { formatCurrency, formatDate } from \"utils\";\r\nimport API from \"data/fetch\";\r\nimport BudgetContext from \"data/context/budget.context\";\r\n\r\nimport { List, ListItem } from \"./BudgetTransactionList.css\";\r\n\r\nfunction BudgetTransactionList() {\r\n  const { data: budget } = useQuery(\r\n    [\"budget\", { id: 1 }],\r\n    API.budget.fetchBudget\r\n  );\r\n  const { data: allCategories } = useQuery(\r\n    \"allCategories\",\r\n    API.common.fetchAllCategories\r\n  );\r\n  const { data: budgetedCategories } = useQuery(\r\n    [\"budgetedCategories\", { id: 1 }],\r\n    API.budget.fetchBudgetedCategories\r\n  );\r\n  const { selectedParentCategoryId } = useContext(BudgetContext.store);\r\n\r\n  const filteredTransactionsBySelectedParentCategory = useMemo(() => {\r\n    if (typeof selectedParentCategoryId === \"undefined\") {\r\n      return budget.transactions;\r\n    }\r\n\r\n    if (selectedParentCategoryId === null) {\r\n      return budget.transactions.filter((transaction) => {\r\n        const hasBudgetedCategory = budgetedCategories.some(\r\n          (budgetedCategory) =>\r\n            budgetedCategory.categoryId === transaction.categoryId\r\n        );\r\n\r\n        return !hasBudgetedCategory;\r\n      });\r\n    }\r\n\r\n    return budget.transactions.filter((transaction) => {\r\n      try {\r\n        const category = allCategories.find(\r\n          (category) => category.id === transaction.categoryId\r\n        );\r\n        const parentCategoryName = category.parentCategory.name;\r\n\r\n        return parentCategoryName === selectedParentCategoryId;\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    });\r\n  }, [\r\n    allCategories,\r\n    budgetedCategories,\r\n    selectedParentCategoryId,\r\n    budget.transactions,\r\n  ]);\r\n\r\n  const groupedTransactions = useMemo(\r\n    () =>\r\n      groupBy(filteredTransactionsBySelectedParentCategory, (transaction) =>\r\n        new Date(transaction.date).getUTCDate()\r\n      ),\r\n    [filteredTransactionsBySelectedParentCategory]\r\n  );\r\n\r\n  return (\r\n    <List>\r\n      {Object.entries(groupedTransactions).map(([key, transactions]) => (\r\n        <li key={key}>\r\n          <ul>\r\n            {transactions.map((transaction) => (\r\n              <ListItem key={transaction.id}>\r\n                <div>{transaction.description}</div>\r\n                <div>{formatCurrency(transaction.amount)}</div>\r\n                <div>{formatDate(transaction.date)}</div>\r\n                <div>\r\n                  {\r\n                    (\r\n                      allCategories.find(\r\n                        (category) => category.id === transaction.categoryId\r\n                      ) || {}\r\n                    ).name\r\n                  }\r\n                </div>\r\n              </ListItem>\r\n            ))}\r\n          </ul>\r\n        </li>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default BudgetTransactionList;\r\n","export { default } from './BudgetTransactionList';"],"sourceRoot":""}