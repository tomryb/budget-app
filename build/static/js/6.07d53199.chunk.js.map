{"version":3,"sources":["data/fetch/budget.fetch.js","data/fetch/common.fetch.js","data/fetch/index.js","pages/Budget/components/AddTransactionForm/AddTransactionForm.js","pages/Budget/components/AddTransactionForm/AddTransactionView.js","pages/Budget/components/AddTransactionForm/index.js"],"names":["fetchBudget","a","id","fetch","process","REACT_APP_API_URL","response","json","data","fetchBudgetedCategories","addTransaction","budgetId","method","headers","body","JSON","stringify","fetchAllCategories","budget","common","required","value","undefined","AddTransactionForm","onSubmit","noop","categories","groupCategoriesBy","groupedCategoriesByParentName","groupBy","categoryItems","useMemo","Object","entries","map","parentName","key","label","category","name","render","handleSubmit","form","submitting","pristine","values","validate","input","meta","type","placeholder","error","touched","parse","parseFloat","step","className","disabled","onClick","reset","AddTransactionView","useQuery","API","allCategories","useMutation","refetchQueries","mutate","history","useHistory","then","goBack"],"mappings":"kXAAaA,EAAW,uCAAG,iCAAAC,EAAA,6DAASC,EAAT,EAASA,GAAT,SACFC,MAAM,GAAD,OACvBC,mHAAYC,kBADW,oBACkBH,EADlB,0BADH,cACnBI,EADmB,gBAINA,EAASC,OAJH,cAInBC,EAJmB,yBAMlBA,GANkB,2CAAH,sDASXC,EAAuB,uCAAG,iCAAAR,EAAA,6DAASC,EAAT,EAASA,GAAT,SACdC,MAAM,GAAD,OACvBC,mHAAYC,kBADW,oBACkBH,EADlB,sBADS,cAC/BI,EAD+B,gBAIlBA,EAASC,OAJS,cAI/BC,EAJ+B,yBAM9BA,GAN8B,2CAAH,sDASvBE,EAAc,uCAAG,iCAAAT,EAAA,6DAASU,EAAT,EAASA,SAAUH,EAAnB,EAAmBA,KAAnB,SACLL,MAAM,GAAD,OACvBC,mHAAYC,kBADW,oBACkBM,EADlB,iBAE1B,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,KARG,cACtBF,EADsB,gBAYfA,EAASC,OAZM,mFAAH,sDClBdU,EAAkB,uCAAG,8BAAAhB,EAAA,sEACTE,MAAM,GAAD,OACvBC,mHAAYC,kBADW,wCADI,cAC1BC,EAD0B,gBAIbA,EAASC,OAJI,cAI1BC,EAJ0B,yBAMzBA,GANyB,2CAAH,qDCGhB,KACbU,SACAC,W,0GCDIC,EAAW,SAACC,GAAD,OAAYA,OAAQC,EAAY,2BAmGlCC,MAjGf,YAII,IAAD,IAHDC,gBAGC,MAHUC,OAGV,EAFDC,EAEC,EAFDA,WACAC,EACC,EADDA,kBAEMC,EAAgCD,EAClCE,kBAAQH,EAAYC,GACpB,KACEG,EAAgBC,mBACpB,kBACEH,EACII,OAAOC,QAAQL,GAA+BM,KAC5C,mCAAEC,EAAF,KAAcT,EAAd,YACE,8BAAUU,IAAKD,EAAYE,MAAOF,GAC/BT,EAAWQ,KAAI,SAACI,GAAD,OACd,4BAAQF,IAAKE,EAASpC,GAAImB,MAAOiB,EAASpC,IACvCoC,EAASC,aAMpBb,EAAWQ,KAAI,SAACI,GAAD,OACb,4BAAQjB,MAAOiB,EAASpC,IAAKoC,EAASC,WAE9C,CAACX,EAA+BF,IAGlC,OACE,kBAAC,IAAD,CACEF,SAAUA,EACVgB,OAAQ,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,SAAnC,EAA6CC,OAA7C,OACN,0BAAMrB,SAAUiB,GACd,kBAAC,IAAD,CAAOF,KAAK,cAAcO,SAAU1B,IACjC,gBAAG2B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,6BACE,8CACA,2CAAWD,EAAX,CAAkBE,KAAK,OAAOC,YAAY,iBACzCF,EAAKG,OAASH,EAAKI,SAAW,8BAAOJ,EAAKG,WAIjD,kBAAC,IAAD,CACEZ,KAAK,SACLO,SAAU1B,EACViC,MAAO,SAAChC,GAAD,OAAWiC,WAAWjC,EAAO,OAEnC,gBAAG0B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,6BACE,yCACA,2CACMD,EADN,CAEEE,KAAK,SACLM,KAAK,OACLL,YAAY,YAEbF,EAAKG,OAASH,EAAKI,SAAW,8BAAOJ,EAAKG,WAIjD,kBAAC,IAAD,CAAOZ,KAAK,aAAaO,SAAU1B,IAChC,gBAAG2B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,6BACE,2CACA,2BAAYD,EAAQjB,GACnBkB,EAAKG,OAASH,EAAKI,SAAW,8BAAOJ,EAAKG,WAIjD,kBAAC,IAAD,CAAOZ,KAAK,OAAOO,SAAU1B,IAC1B,gBAAG2B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,6BACE,uCACA,2CAAWD,EAAX,CAAkBE,KAAK,OAAOC,YAAY,UACzCF,EAAKG,OAASH,EAAKI,SAAW,8BAAOJ,EAAKG,WAKjD,yBAAKK,UAAU,WACb,4BAAQP,KAAK,SAASQ,SAAUd,GAAhC,UAGA,4BACEM,KAAK,SACLS,QAAShB,EAAKiB,MACdF,SAAUd,GAAcC,GAH1B,eCjDGgB,MAhCf,WACE,IAAc1C,EAAW2C,YACvB,CAAC,SAAU,CAAE3D,GAAI,IACjB4D,IAAI5C,OAAOlB,aAFLQ,KAIMuD,EAAkBF,YAC9B,gBACAC,IAAI3C,OAAOF,oBAFLT,KAIR,EAAiBwD,YAAYF,IAAI5C,OAAOR,eAAgB,CACtDuD,eAAgB,CAAC,CAAC,SAAU,CAAE/D,GAAI,OAD7BgE,EAAP,oBAGMC,EAAUC,cAWhB,OACE,kBAAC,EAAD,CACE1C,WAAYqC,EACZpC,kBAAkB,sBAClBH,SAb+B,SAACqB,GAClCqB,EAAO,CACLvD,SAAUO,EAAOhB,GACjBM,KAAMqC,IACLwB,MAAK,WACNF,EAAQG,gBC3Bd","file":"static/js/6.07d53199.chunk.js","sourcesContent":["export const fetchBudget = async ({ id }) => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${id}/?_embed=transactions`\r\n  );\r\n  const data = await response.json();\r\n\r\n  return data;\r\n};\r\n\r\nexport const fetchBudgetedCategories = async ({ id }) => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${id}/budgetCategories`\r\n  );\r\n  const data = await response.json();\r\n\r\n  return data;\r\n};\r\n\r\nexport const addTransaction = async ({ budgetId, data }) => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    }\r\n  );\r\n\r\n  return await response.json();\r\n};\r\n","export const fetchAllCategories = async () => {\r\n  const response = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`\r\n  );\r\n  const data = await response.json();\r\n\r\n  return data;\r\n};\r\n","import * as budget from './budget.fetch';\r\nimport * as common from './common.fetch';\r\n\r\nexport default {\r\n  budget,\r\n  common,\r\n}","import React, { useMemo } from \"react\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport { groupBy, noop } from \"lodash\";\r\n\r\nconst required = (value) => (value ? undefined : \"This field is Required!\");\r\n\r\nfunction AddTransactionForm({\r\n  onSubmit = noop,\r\n  categories,\r\n  groupCategoriesBy,\r\n}) {\r\n  const groupedCategoriesByParentName = groupCategoriesBy\r\n    ? groupBy(categories, groupCategoriesBy)\r\n    : null;\r\n  const categoryItems = useMemo(\r\n    () =>\r\n      groupedCategoriesByParentName\r\n        ? Object.entries(groupedCategoriesByParentName).map(\r\n            ([parentName, categories]) => (\r\n              <optgroup key={parentName} label={parentName}>\r\n                {categories.map((category) => (\r\n                  <option key={category.id} value={category.id}>\r\n                    {category.name}\r\n                  </option>\r\n                ))}\r\n              </optgroup>\r\n            )\r\n          )\r\n        : categories.map((category) => (\r\n            <option value={category.id}>{category.name}</option>\r\n          )),\r\n    [groupedCategoriesByParentName, categories]\r\n  );\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}\r\n      render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <Field name=\"description\" validate={required}>\r\n            {({ input, meta }) => (\r\n              <div>\r\n                <label>Description</label>\r\n                <input {...input} type=\"text\" placeholder=\"Description\" />\r\n                {meta.error && meta.touched && <span>{meta.error}</span>}\r\n              </div>\r\n            )}\r\n          </Field>\r\n          <Field\r\n            name=\"amount\"\r\n            validate={required}\r\n            parse={(value) => parseFloat(value, 10)}\r\n          >\r\n            {({ input, meta }) => (\r\n              <div>\r\n                <label>Amount</label>\r\n                <input\r\n                  {...input}\r\n                  type=\"number\"\r\n                  step=\"0.01\"\r\n                  placeholder=\"Amount\"\r\n                />\r\n                {meta.error && meta.touched && <span>{meta.error}</span>}\r\n              </div>\r\n            )}\r\n          </Field>\r\n          <Field name=\"categoryId\" validate={required}>\r\n            {({ input, meta }) => (\r\n              <div>\r\n                <label>Category</label>\r\n                <select {...input}>{categoryItems}</select>\r\n                {meta.error && meta.touched && <span>{meta.error}</span>}\r\n              </div>\r\n            )}\r\n          </Field>\r\n          <Field name=\"date\" validate={required}>\r\n            {({ input, meta }) => (\r\n              <div>\r\n                <label>Date</label>\r\n                <input {...input} type=\"date\" placeholder=\"Date\" />\r\n                {meta.error && meta.touched && <span>{meta.error}</span>}\r\n              </div>\r\n            )}\r\n          </Field>\r\n\r\n          <div className=\"buttons\">\r\n            <button type=\"submit\" disabled={submitting}>\r\n              Submit\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={form.reset}\r\n              disabled={submitting || pristine}\r\n            >\r\n              Reset\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nexport default AddTransactionForm;\r\n","import React from \"react\";\r\nimport { useQuery, useMutation } from \"react-query\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport API from \"data/fetch\";\r\n\r\nimport AddTransactionForm from \"./AddTransactionForm\";\r\n\r\nfunction AddTransactionView() {\r\n  const { data: budget } = useQuery(\r\n    [\"budget\", { id: 1 }],\r\n    API.budget.fetchBudget\r\n  );\r\n  const { data: allCategories } = useQuery(\r\n    \"allCategories\",\r\n    API.common.fetchAllCategories\r\n  );\r\n  const [mutate] = useMutation(API.budget.addTransaction, {\r\n    refetchQueries: [[\"budget\", { id: 1 }]],\r\n  });\r\n  const history = useHistory();\r\n\r\n  const handleSubmitAddTransaction = (values) => {\r\n    mutate({\r\n      budgetId: budget.id,\r\n      data: values,\r\n    }).then(() => {\r\n      history.goBack();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AddTransactionForm\r\n      categories={allCategories}\r\n      groupCategoriesBy=\"parentCategory.name\"\r\n      onSubmit={handleSubmitAddTransaction}\r\n    />\r\n  );\r\n}\r\n\r\nexport default AddTransactionView;\r\n","export { default } from './AddTransactionView';"],"sourceRoot":""}